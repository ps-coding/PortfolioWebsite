{"ast":null,"code":"import firebase from 'firebase/compat/app';\nimport { of } from 'rxjs';\nimport { catchError, map, mergeMap, take } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/fire/compat/auth\";\nimport * as i2 from \"@angular/fire/compat/firestore\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"./../internet/online.service\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(afAuth, afs, router, onlineService) {\n      this.afAuth = afAuth;\n      this.afs = afs;\n      this.router = router;\n      this.onlineService = onlineService;\n      this.isAdmin = false;\n      this.isSuperadmin = false;\n      this.adminCollection = this.afs.collection('admins', ref => ref.orderBy('email', 'asc'));\n      this.superadminCollection = this.afs.collection('superadmins', ref => ref.orderBy('email', 'asc'));\n      this.check();\n    }\n\n    check() {\n      this.afAuth.authState.subscribe(user => {\n        this.user = user;\n        this.adminCheck(user === null || user === void 0 ? void 0 : user.uid, user === null || user === void 0 ? void 0 : user.email);\n        this.superadminCheck(user === null || user === void 0 ? void 0 : user.uid, user === null || user === void 0 ? void 0 : user.email);\n      }, () => {\n        this.user = null;\n        this.isAdmin = false;\n        this.isSuperadmin = false;\n      });\n    }\n\n    adminCheck(uid, email) {\n      this.getAdmins(() => {\n        this.isAdmin = false;\n      }, () => {\n        this.isAdmin = false;\n      }).subscribe(admins => {\n        if (admins) {\n          if (uid && email) {\n            this.isAdmin = admins.some(admin => {\n              return admin.id === uid && admin.email === email;\n            });\n          } else {\n            this.isAdmin = false;\n          }\n        } else {\n          this.isAdmin = false;\n        }\n      });\n    }\n\n    superadminCheck(uid, email) {\n      this.getSuperadmins(() => {\n        this.isSuperadmin = false;\n      }, () => {\n        this.isSuperadmin = false;\n      }).subscribe(superadmins => {\n        if (superadmins) {\n          if (uid && email) {\n            this.isSuperadmin = superadmins.some(superadmin => {\n              return superadmin.id === uid && superadmin.email === email;\n            });\n          } else {\n            this.isSuperadmin = false;\n          }\n        } else {\n          this.isSuperadmin = false;\n        }\n      });\n    }\n\n    getAdmins(errorCallback, offlineCallback) {\n      return this.onlineService.isOnline.pipe(mergeMap(online => {\n        if (online) {\n          return this.adminCollection.snapshotChanges().pipe(map(actions => {\n            if (online) {\n              return actions.map(object => {\n                const id = object.payload.doc.id;\n                const data = object.payload.doc.data();\n                return Object.assign(Object.assign({}, data), {\n                  id\n                });\n              });\n            } else {\n              offlineCallback();\n              return null;\n            }\n          }), catchError(() => {\n            errorCallback();\n            return of(null);\n          }));\n        } else {\n          offlineCallback();\n          return of(null);\n        }\n      }), catchError(() => {\n        offlineCallback();\n        return of(null);\n      }));\n    }\n\n    getSuperadmins(errorCallback, offlineCallback) {\n      return this.onlineService.isOnline.pipe(mergeMap(online => {\n        if (online) {\n          return this.superadminCollection.snapshotChanges().pipe(map(actions => {\n            if (online) {\n              return actions.map(object => {\n                const id = object.payload.doc.id;\n                const data = object.payload.doc.data();\n                return Object.assign(Object.assign({}, data), {\n                  id\n                });\n              });\n            } else {\n              offlineCallback();\n              return null;\n            }\n          }), catchError(() => {\n            errorCallback();\n            return of(null);\n          }));\n        } else {\n          offlineCallback();\n          return of(null);\n        }\n      }), catchError(() => {\n        offlineCallback();\n        return of(null);\n      }));\n    }\n\n    getAdmin(id) {\n      return this.afs.doc(`admins/${id}`);\n    }\n\n    addAdmin(uid, data, successCallback, errorCallback, offlineCallback) {\n      return this.onlineService.isOnline.pipe(take(1), map(online => {\n        if (online) {\n          this.adminCollection.doc(uid).set(data).then(() => {\n            successCallback();\n          }).catch(() => {\n            errorCallback();\n          });\n        } else {\n          offlineCallback();\n        }\n      }), catchError(() => {\n        offlineCallback();\n        return of(null);\n      }));\n    }\n\n    deleteAdmin(id, errorCallback, offlineCallback) {\n      return this.onlineService.isOnline.pipe(take(1), map(online => {\n        if (online) {\n          this.getAdmin(id).delete().catch(() => {\n            errorCallback();\n          });\n        } else {\n          offlineCallback();\n        }\n      }), catchError(() => {\n        offlineCallback();\n        return of(null);\n      }));\n    }\n\n    login(errorCallback) {\n      this.afAuth.signInWithPopup(new firebase.auth.GoogleAuthProvider()).catch(() => {\n        errorCallback();\n      });\n    }\n\n    logout(errorCallback) {\n      this.afAuth.signOut().catch(() => {\n        errorCallback();\n      });\n\n      if (this.router.url === '/blog/new' || this.router.url === '/admins') {\n        this.router.navigateByUrl('');\n      }\n    }\n\n  }\n\n  AuthService.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.AngularFireAuth), i0.ɵɵinject(i2.AngularFirestore), i0.ɵɵinject(i3.Router), i0.ɵɵinject(i4.OnlineService));\n  };\n\n  AuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module"}