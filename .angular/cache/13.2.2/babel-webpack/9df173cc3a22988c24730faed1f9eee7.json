{"ast":null,"code":"import { of } from 'rxjs';\nimport { catchError, map, mergeMap, take } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/fire/compat/firestore\";\nimport * as i2 from \"@angular/fire/compat/storage\";\nimport * as i3 from \"./../internet/online.service\";\nexport let PostService = /*#__PURE__*/(() => {\n  class PostService {\n    constructor(afs, storage, onlineService) {\n      this.afs = afs;\n      this.storage = storage;\n      this.onlineService = onlineService;\n      this.postsCollection = this.afs.collection('posts', ref => ref.orderBy('published', 'desc'));\n    }\n\n    getPosts(errorCallback, offlineCallback) {\n      return this.onlineService.isOnline.pipe(mergeMap(online => {\n        if (online) {\n          return this.postsCollection.snapshotChanges().pipe(map(actions => {\n            if (online) {\n              return actions.map(object => {\n                const data = object.payload.doc.data();\n                const id = object.payload.doc.id;\n                return Object.assign(Object.assign({}, data), {\n                  id\n                });\n              });\n            } else {\n              offlineCallback();\n              return null;\n            }\n          }), catchError(() => {\n            errorCallback();\n            return of(null);\n          }));\n        } else {\n          offlineCallback();\n          return of(null);\n        }\n      }), catchError(() => {\n        offlineCallback();\n        return of(null);\n      }));\n    }\n\n    getComments(id, errorCallback, offlineCallback) {\n      const commentsCollection = this.getPost(id).collection('comments', ref => ref.orderBy('published', 'desc'));\n      return this.onlineService.isOnline.pipe(mergeMap(online => {\n        if (online) {\n          return commentsCollection.snapshotChanges().pipe(map(actions => {\n            if (online) {\n              return actions.map(object => {\n                const data = object.payload.doc.data();\n                const id = object.payload.doc.id;\n                return Object.assign(Object.assign({}, data), {\n                  id\n                });\n              });\n            } else {\n              offlineCallback();\n              return null;\n            }\n          }), catchError(() => {\n            errorCallback();\n            return of(null);\n          }));\n        } else {\n          offlineCallback();\n          return of(null);\n        }\n      }), catchError(() => {\n        offlineCallback();\n        return of(null);\n      }));\n    }\n\n    getPost(id) {\n      return this.afs.doc(`posts/${id}`);\n    }\n\n    getComment(postID, commentID) {\n      return this.afs.doc(`posts/${postID}/comments/${commentID}`);\n    }\n\n    getPostData(id, errorCallback, commentErrorCallback, offlineCallback) {\n      const postDocument = this.getPost(id);\n      return this.onlineService.isOnline.pipe(mergeMap(online => {\n        if (online) {\n          return postDocument.snapshotChanges().pipe(mergeMap(object => {\n            if (online) {\n              const data = object.payload.data();\n              const id = object.payload.id;\n              return this.getComments(id, commentErrorCallback, offlineCallback).pipe(map(comments => {\n                if (online) {\n                  const post = Object.assign(Object.assign({}, data), {\n                    id,\n                    comments\n                  });\n                  return post;\n                } else {\n                  offlineCallback();\n                  return null;\n                }\n              }), catchError(() => {\n                errorCallback();\n                return of(null);\n              }));\n            } else {\n              offlineCallback();\n              return of(null);\n            }\n          }), catchError(() => {\n            errorCallback();\n            return of(null);\n          }));\n        } else {\n          offlineCallback();\n          return of(null);\n        }\n      }), catchError(() => {\n        offlineCallback();\n        return of(null);\n      }));\n    }\n\n    createPost(data, successCallback, errorCallback, offlineCallback) {\n      return this.onlineService.isOnline.pipe(take(1), map(online => {\n        if (online) {\n          this.postsCollection.add(data).then(() => {\n            successCallback();\n          }).catch(() => {\n            errorCallback();\n          });\n        } else {\n          offlineCallback();\n        }\n      }), catchError(() => {\n        offlineCallback();\n        return of(null);\n      }));\n    }\n\n    editPost(id, data, successCallback, errorCallback, offlineCallback) {\n      return this.onlineService.isOnline.pipe(take(1), map(online => {\n        if (online) {\n          this.getPost(id).update(data).then(() => {\n            successCallback();\n          }).catch(() => {\n            errorCallback();\n          });\n        } else {\n          offlineCallback();\n        }\n      }), catchError(() => {\n        offlineCallback();\n        return of(null);\n      }));\n    }\n\n    deletePost(id, successCallback, successImageCallback, errorCallback, errorCommentCallback, errorImageCallback, offlineCallback) {\n      return this.onlineService.isOnline.pipe(take(1), mergeMap(online => {\n        if (online) {\n          return this.getPost(id).get().pipe(map(snapshot => {\n            if (online) {\n              const post = snapshot.data();\n              const postImage = post === null || post === void 0 ? void 0 : post.image;\n              this.deleteImageFromURL(postImage, errorImageCallback, offlineCallback).subscribe(() => {\n                successImageCallback();\n              });\n              this.deletePostFromDatabase(id, errorCallback, errorCommentCallback, offlineCallback).subscribe(() => {\n                successCallback();\n              });\n            } else {\n              offlineCallback();\n            }\n          }), catchError(() => {\n            errorCallback();\n            return of(null);\n          }));\n        } else {\n          offlineCallback();\n          return of(null);\n        }\n      }), catchError(() => {\n        offlineCallback();\n        return of(null);\n      }));\n    }\n\n    deletePostFromDatabase(id, errorCallback, errorCommentCallback, offlineCallback) {\n      return this.onlineService.isOnline.pipe(take(1), mergeMap(online => {\n        if (online) {\n          return this.getPost(id).collection('comments').get().pipe(map(snapshot => {\n            if (online) {\n              if (snapshot && !snapshot.empty) {\n                snapshot.forEach(document => {\n                  document.ref.delete().catch(() => {\n                    errorCommentCallback();\n                  });\n                });\n              }\n\n              this.getPost(id).delete().catch(() => {\n                errorCallback();\n              });\n            } else {\n              offlineCallback();\n            }\n          }), catchError(() => {\n            errorCallback();\n            return of(null);\n          }));\n        } else {\n          offlineCallback();\n          return of(null);\n        }\n      }), catchError(() => {\n        offlineCallback();\n        return of(null);\n      }));\n    }\n\n    deleteImageFromURL(imageURL, errorCallback, offlineCallback) {\n      try {\n        const imageReference = this.storage.refFromURL(imageURL);\n        return this.onlineService.isOnline.pipe(take(1), mergeMap(online => {\n          if (online) {\n            return imageReference.delete().pipe(catchError(() => {\n              errorCallback();\n              return of(null);\n            }));\n          } else {\n            offlineCallback();\n            return of(null);\n          }\n        }), catchError(() => {\n          offlineCallback();\n          return of(null);\n        }));\n      } catch (_a) {\n        errorCallback();\n        return of(null);\n      }\n    }\n\n    addComment(id, data, successCallback, errorCallback, offlineCallback) {\n      return this.onlineService.isOnline.pipe(take(1), map(online => {\n        if (online) {\n          this.getPost(id).collection('comments').add(data).then(() => {\n            successCallback();\n          }).catch(() => {\n            errorCallback();\n          });\n        } else {\n          offlineCallback();\n        }\n      }), catchError(() => {\n        offlineCallback();\n        return of(null);\n      }));\n    }\n\n    deleteComment(postID, commentID, successCallback, errorCallback, offlineCallback) {\n      return this.onlineService.isOnline.pipe(take(1), map(online => {\n        if (online) {\n          this.getComment(postID, commentID).delete().then(() => {\n            successCallback();\n          }).catch(() => {\n            errorCallback();\n          });\n        } else {\n          offlineCallback();\n        }\n      }), catchError(() => {\n        offlineCallback();\n        return of(null);\n      }));\n    }\n\n  }\n\n  PostService.ɵfac = function PostService_Factory(t) {\n    return new (t || PostService)(i0.ɵɵinject(i1.AngularFirestore), i0.ɵɵinject(i2.AngularFireStorage), i0.ɵɵinject(i3.OnlineService));\n  };\n\n  PostService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: PostService,\n    factory: PostService.ɵfac,\n    providedIn: 'root'\n  });\n  return PostService;\n})();","map":null,"metadata":{},"sourceType":"module"}