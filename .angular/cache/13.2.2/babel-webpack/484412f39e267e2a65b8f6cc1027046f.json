{"ast":null,"code":"import { map, mergeMap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./auth.service\";\nimport * as i2 from \"@angular/router\";\nexport let AdminAuthGuardService = /*#__PURE__*/(() => {\n  class AdminAuthGuardService {\n    constructor(auth, router) {\n      this.auth = auth;\n      this.router = router;\n    }\n\n    canActivate() {\n      return this.isAdmin().pipe(mergeMap(isAdmin => {\n        return this.isSuperadmin().pipe(map(isSuperadmin => {\n          if (isAdmin || isSuperadmin) {\n            return true;\n          } else {\n            this.router.navigateByUrl('');\n            return false;\n          }\n        }));\n      }));\n    }\n\n    isAdmin() {\n      return this.auth.adminCollection.snapshotChanges().pipe(map(actions => {\n        if (this.auth.user) {\n          let adminValue = false;\n          actions.map(action => {\n            var _a, _b;\n\n            const adminUID = action.payload.doc.id;\n            const adminEmail = action.payload.doc.data().email;\n\n            if (adminUID === ((_a = this.auth.user) === null || _a === void 0 ? void 0 : _a.uid) && adminEmail === ((_b = this.auth.user) === null || _b === void 0 ? void 0 : _b.email)) {\n              adminValue = true;\n            }\n          });\n          return adminValue;\n        } else {\n          return false;\n        }\n      }));\n    }\n\n    isSuperadmin() {\n      return this.auth.superadminCollection.snapshotChanges().pipe(map(actions => {\n        if (this.auth.user) {\n          let superadminValue = false;\n          actions.map(action => {\n            var _a, _b;\n\n            const superadminUID = action.payload.doc.id;\n            const superadminEmail = action.payload.doc.data().email;\n\n            if (superadminUID === ((_a = this.auth.user) === null || _a === void 0 ? void 0 : _a.uid) && superadminEmail === ((_b = this.auth.user) === null || _b === void 0 ? void 0 : _b.email)) {\n              superadminValue = true;\n            }\n          });\n          return superadminValue;\n        } else {\n          return false;\n        }\n      }));\n    }\n\n  }\n\n  AdminAuthGuardService.ɵfac = function AdminAuthGuardService_Factory(t) {\n    return new (t || AdminAuthGuardService)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.Router));\n  };\n\n  AdminAuthGuardService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AdminAuthGuardService,\n    factory: AdminAuthGuardService.ɵfac,\n    providedIn: 'root'\n  });\n  return AdminAuthGuardService;\n})();","map":null,"metadata":{},"sourceType":"module"}